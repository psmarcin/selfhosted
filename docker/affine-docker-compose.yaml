name: affine
services:
  affine:
    image: ghcr.io/toeverything/affine:${AFFINE_REVISION:-stable}
    container_name: affine_server
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      affine_migration:
        condition: service_completed_successfully
    networks:
      - proxy
    labels:
      - docker-volume-backup.stop-during-backup=true
      - traefik.enable=true
      - traefik.http.services.affine.loadbalancer.server.port=3010
      - traefik.http.routers.affine.rule=Host(`${HOST}`)
      - traefik.http.routers.affine.tls.certresolver=${CERT_RESOLVER}
      - traefik.http.routers.affine.tls=true
      - traefik.docker.network=proxy
    volumes:
      - ${DOCKER_DIR}/affine/storage:/root/.affine/storage
      - affine_data:/root/.affine/config
    environment:
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
      - AFFINE_SERVER_HTTPS=true
      - AFFINE_SERVER_HOST=${HOST}
    restart: unless-stopped

  affine_migration:
    image: ghcr.io/toeverything/affine:${AFFINE_REVISION:-stable}
    container_name: affine_migration_job
    volumes:
      - ${DOCKER_DIR}/affine/storage:/root/.affine/storage
      - affine_data:/root/.affine/config
    command: [ 'sh', '-c', 'node ./scripts/self-host-predeploy.js' ]
    environment:
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis
    container_name: affine_redis
    healthcheck:
      test: [ 'CMD', 'redis-cli', '--raw', 'incr', 'ping' ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres:
    image: pgvector/pgvector:pg16
    container_name: affine_postgres
    volumes:
      - affine_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE:-affine}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      # you better set a password for you database
      # or you may add 'POSTGRES_HOST_AUTH_METHOD=trust' to ignore postgres security policy
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test:
        [ 'CMD', 'pg_isready', '-U', "${DB_USERNAME}", '-d', "${DB_DATABASE:-affine}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  affine_data:
  affine_postgres_data:

networks:
  proxy:
    external: true